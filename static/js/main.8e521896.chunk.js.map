{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/MainPage.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CounterButton","count","color","onClick","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","ErrorBoundry","App","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8e521896.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5 new-clas\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, { Component } from \"react\";\r\n\r\nclass CounterButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 1 };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        id=\"counter\"\r\n        color={this.props.color}\r\n        onClick={() => this.setState(state => ({ count: state.count + 1 }))}\r\n      >\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from \"react\";\r\n\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\nimport \"./MainPage.css\";\r\nimport CounterButton from \"../components/CounterButton\";\r\n\r\nclass MainPage extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  filterRobots = () => {\r\n    return this.props.robots.filter(robot => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(this.props.searchField.toLowerCase());\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { onSearchChange, isPending } = this.props;\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <CounterButton color=\"red\" />\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          {isPending ? (\r\n            <h1 className=\"loading\">Loading</h1>\r\n          ) : (\r\n            <ErrorBoundry>\r\n              <CardList robots={this.filterRobots()} />\r\n            </ErrorBoundry>\r\n          )}\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setSearchField, requestRobots } from \"../actions\";\nimport MainPage from \"../components/MainPage.js\";\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  };\n};\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  render() {\n    return <MainPage {...this.props} />;\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/*import { apiCall } from \"./api/api\";*/\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  return fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: { error: \"error\" } })\n    );\n};\n\n/*\n\nexport const apiCall = (link) =>\n  fetch(link).then(response => response.json())\n\napiCall('https://jsonplaceholder.typicode.com/users')\n\nreturn fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n\n*/\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: false\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\nimport registerServiceWorker from \"./serviceWorker\";\nimport { requestRobots, searchRobots } from \"./reducers\";\nimport \"./index.css\";\n\nconst rootReducers = combineReducers({ requestRobots, searchRobots });\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}